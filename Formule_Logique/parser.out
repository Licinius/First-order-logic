Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formule
Rule 1     formule -> LPAR formule RPAR
Rule 2     formule -> NOT formule
Rule 3     formule -> formule oper formule
Rule 4     formule -> var formule
Rule 5     formule -> pred
Rule 6     pred -> ID LPAR ID listarg RPAR
Rule 7     listarg -> SEP ID listarg
Rule 8     listarg -> empty
Rule 9     oper -> OR
Rule 10    oper -> AND
Rule 11    oper -> IMPL
Rule 12    var -> QUANT ID
Rule 13    empty -> <empty>

Terminals, with rules where they appear

AND                  : 10
ID                   : 6 6 7 12
IMPL                 : 11
LPAR                 : 1 6
NOT                  : 2
OR                   : 9
QUANT                : 12
RPAR                 : 1 6
SEP                  : 7
error                : 

Nonterminals, with rules where they appear

empty                : 8
formule              : 1 2 3 3 4 0
listarg              : 6 7
oper                 : 3
pred                 : 5
var                  : 4

Parsing method: LALR

state 0

    (0) S' -> . formule
    (1) formule -> . LPAR formule RPAR
    (2) formule -> . NOT formule
    (3) formule -> . formule oper formule
    (4) formule -> . var formule
    (5) formule -> . pred
    (12) var -> . QUANT ID
    (6) pred -> . ID LPAR ID listarg RPAR

    LPAR            shift and go to state 1
    NOT             shift and go to state 5
    QUANT           shift and go to state 4
    ID              shift and go to state 6

    var                            shift and go to state 3
    formule                        shift and go to state 7
    pred                           shift and go to state 2

state 1

    (1) formule -> LPAR . formule RPAR
    (1) formule -> . LPAR formule RPAR
    (2) formule -> . NOT formule
    (3) formule -> . formule oper formule
    (4) formule -> . var formule
    (5) formule -> . pred
    (12) var -> . QUANT ID
    (6) pred -> . ID LPAR ID listarg RPAR

    LPAR            shift and go to state 1
    NOT             shift and go to state 5
    QUANT           shift and go to state 4
    ID              shift and go to state 6

    var                            shift and go to state 3
    formule                        shift and go to state 8
    pred                           shift and go to state 2

state 2

    (5) formule -> pred .

    OR              reduce using rule 5 (formule -> pred .)
    AND             reduce using rule 5 (formule -> pred .)
    IMPL            reduce using rule 5 (formule -> pred .)
    $end            reduce using rule 5 (formule -> pred .)
    RPAR            reduce using rule 5 (formule -> pred .)


state 3

    (4) formule -> var . formule
    (1) formule -> . LPAR formule RPAR
    (2) formule -> . NOT formule
    (3) formule -> . formule oper formule
    (4) formule -> . var formule
    (5) formule -> . pred
    (12) var -> . QUANT ID
    (6) pred -> . ID LPAR ID listarg RPAR

    LPAR            shift and go to state 1
    NOT             shift and go to state 5
    QUANT           shift and go to state 4
    ID              shift and go to state 6

    var                            shift and go to state 3
    formule                        shift and go to state 9
    pred                           shift and go to state 2

state 4

    (12) var -> QUANT . ID

    ID              shift and go to state 10


state 5

    (2) formule -> NOT . formule
    (1) formule -> . LPAR formule RPAR
    (2) formule -> . NOT formule
    (3) formule -> . formule oper formule
    (4) formule -> . var formule
    (5) formule -> . pred
    (12) var -> . QUANT ID
    (6) pred -> . ID LPAR ID listarg RPAR

    LPAR            shift and go to state 1
    NOT             shift and go to state 5
    QUANT           shift and go to state 4
    ID              shift and go to state 6

    var                            shift and go to state 3
    formule                        shift and go to state 11
    pred                           shift and go to state 2

state 6

    (6) pred -> ID . LPAR ID listarg RPAR

    LPAR            shift and go to state 12


state 7

    (0) S' -> formule .
    (3) formule -> formule . oper formule
    (9) oper -> . OR
    (10) oper -> . AND
    (11) oper -> . IMPL

    OR              shift and go to state 16
    AND             shift and go to state 14
    IMPL            shift and go to state 15

    oper                           shift and go to state 13

state 8

    (1) formule -> LPAR formule . RPAR
    (3) formule -> formule . oper formule
    (9) oper -> . OR
    (10) oper -> . AND
    (11) oper -> . IMPL

    RPAR            shift and go to state 17
    OR              shift and go to state 16
    AND             shift and go to state 14
    IMPL            shift and go to state 15

    oper                           shift and go to state 13

state 9

    (4) formule -> var formule .
    (3) formule -> formule . oper formule
    (9) oper -> . OR
    (10) oper -> . AND
    (11) oper -> . IMPL

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for IMPL resolved as shift
    $end            reduce using rule 4 (formule -> var formule .)
    RPAR            reduce using rule 4 (formule -> var formule .)
    OR              shift and go to state 16
    AND             shift and go to state 14
    IMPL            shift and go to state 15

  ! OR              [ reduce using rule 4 (formule -> var formule .) ]
  ! AND             [ reduce using rule 4 (formule -> var formule .) ]
  ! IMPL            [ reduce using rule 4 (formule -> var formule .) ]

    oper                           shift and go to state 13

state 10

    (12) var -> QUANT ID .

    LPAR            reduce using rule 12 (var -> QUANT ID .)
    NOT             reduce using rule 12 (var -> QUANT ID .)
    QUANT           reduce using rule 12 (var -> QUANT ID .)
    ID              reduce using rule 12 (var -> QUANT ID .)


state 11

    (2) formule -> NOT formule .
    (3) formule -> formule . oper formule
    (9) oper -> . OR
    (10) oper -> . AND
    (11) oper -> . IMPL

    OR              reduce using rule 2 (formule -> NOT formule .)
    AND             reduce using rule 2 (formule -> NOT formule .)
    IMPL            reduce using rule 2 (formule -> NOT formule .)
    $end            reduce using rule 2 (formule -> NOT formule .)
    RPAR            reduce using rule 2 (formule -> NOT formule .)

  ! OR              [ shift and go to state 16 ]
  ! AND             [ shift and go to state 14 ]
  ! IMPL            [ shift and go to state 15 ]

    oper                           shift and go to state 13

state 12

    (6) pred -> ID LPAR . ID listarg RPAR

    ID              shift and go to state 18


state 13

    (3) formule -> formule oper . formule
    (1) formule -> . LPAR formule RPAR
    (2) formule -> . NOT formule
    (3) formule -> . formule oper formule
    (4) formule -> . var formule
    (5) formule -> . pred
    (12) var -> . QUANT ID
    (6) pred -> . ID LPAR ID listarg RPAR

    LPAR            shift and go to state 1
    NOT             shift and go to state 5
    QUANT           shift and go to state 4
    ID              shift and go to state 6

    var                            shift and go to state 3
    formule                        shift and go to state 19
    pred                           shift and go to state 2

state 14

    (10) oper -> AND .

    LPAR            reduce using rule 10 (oper -> AND .)
    NOT             reduce using rule 10 (oper -> AND .)
    QUANT           reduce using rule 10 (oper -> AND .)
    ID              reduce using rule 10 (oper -> AND .)


state 15

    (11) oper -> IMPL .

    LPAR            reduce using rule 11 (oper -> IMPL .)
    NOT             reduce using rule 11 (oper -> IMPL .)
    QUANT           reduce using rule 11 (oper -> IMPL .)
    ID              reduce using rule 11 (oper -> IMPL .)


state 16

    (9) oper -> OR .

    LPAR            reduce using rule 9 (oper -> OR .)
    NOT             reduce using rule 9 (oper -> OR .)
    QUANT           reduce using rule 9 (oper -> OR .)
    ID              reduce using rule 9 (oper -> OR .)


state 17

    (1) formule -> LPAR formule RPAR .

    OR              reduce using rule 1 (formule -> LPAR formule RPAR .)
    AND             reduce using rule 1 (formule -> LPAR formule RPAR .)
    IMPL            reduce using rule 1 (formule -> LPAR formule RPAR .)
    $end            reduce using rule 1 (formule -> LPAR formule RPAR .)
    RPAR            reduce using rule 1 (formule -> LPAR formule RPAR .)


state 18

    (6) pred -> ID LPAR ID . listarg RPAR
    (7) listarg -> . SEP ID listarg
    (8) listarg -> . empty
    (13) empty -> .

    SEP             shift and go to state 20
    RPAR            reduce using rule 13 (empty -> .)

    listarg                        shift and go to state 21
    empty                          shift and go to state 22

state 19

    (3) formule -> formule oper formule .
    (3) formule -> formule . oper formule
    (9) oper -> . OR
    (10) oper -> . AND
    (11) oper -> . IMPL

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for IMPL resolved as shift
    $end            reduce using rule 3 (formule -> formule oper formule .)
    RPAR            reduce using rule 3 (formule -> formule oper formule .)
    OR              shift and go to state 16
    AND             shift and go to state 14
    IMPL            shift and go to state 15

  ! OR              [ reduce using rule 3 (formule -> formule oper formule .) ]
  ! AND             [ reduce using rule 3 (formule -> formule oper formule .) ]
  ! IMPL            [ reduce using rule 3 (formule -> formule oper formule .) ]

    oper                           shift and go to state 13

state 20

    (7) listarg -> SEP . ID listarg

    ID              shift and go to state 23


state 21

    (6) pred -> ID LPAR ID listarg . RPAR

    RPAR            shift and go to state 24


state 22

    (8) listarg -> empty .

    RPAR            reduce using rule 8 (listarg -> empty .)


state 23

    (7) listarg -> SEP ID . listarg
    (7) listarg -> . SEP ID listarg
    (8) listarg -> . empty
    (13) empty -> .

    SEP             shift and go to state 20
    RPAR            reduce using rule 13 (empty -> .)

    listarg                        shift and go to state 25
    empty                          shift and go to state 22

state 24

    (6) pred -> ID LPAR ID listarg RPAR .

    OR              reduce using rule 6 (pred -> ID LPAR ID listarg RPAR .)
    AND             reduce using rule 6 (pred -> ID LPAR ID listarg RPAR .)
    IMPL            reduce using rule 6 (pred -> ID LPAR ID listarg RPAR .)
    $end            reduce using rule 6 (pred -> ID LPAR ID listarg RPAR .)
    RPAR            reduce using rule 6 (pred -> ID LPAR ID listarg RPAR .)


state 25

    (7) listarg -> SEP ID listarg .

    RPAR            reduce using rule 7 (listarg -> SEP ID listarg .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for OR in state 9 resolved as shift
WARNING: shift/reduce conflict for AND in state 9 resolved as shift
WARNING: shift/reduce conflict for IMPL in state 9 resolved as shift
WARNING: shift/reduce conflict for OR in state 19 resolved as shift
WARNING: shift/reduce conflict for AND in state 19 resolved as shift
WARNING: shift/reduce conflict for IMPL in state 19 resolved as shift
